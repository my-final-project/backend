openapi: 3.0.3
info:
  title: 'API de usuários'
  description: 'API para gerenciamento de usuários'
  version: 1.0.0
servers:
  - url: 'http://localhost:8081'
tags:
  - name: User
    description: 'Operações relacionadas a usuários'
paths:
  /users:
    get:
      tags:
        - User
      summary: 'Lista todos os usuários'
      responses:
        '200':
          description: 'Lista de usuários'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      tags:
        - User
      summary: 'Cria um novo usuário'
      requestBody:
        description: 'Dados do novo usuário'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: 'Usuário criado com sucesso'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /users/{id}:
    get:
      tags:
        - User
      summary: 'Obtém um usuário pelo ID'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Usuário encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 'Usuário não encontrado'
    put:
      tags:
        - User
      summary: 'Atualiza um usuário existente'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Dados do usuário a serem atualizados'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: 'Usuário atualizado com sucesso'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 'Usuário não encontrado'
    delete:
      tags:
        - User
      summary: 'Deleta um usuário pelo ID'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Usuário deletado com sucesso'
        '404':
          description: 'Usuário não encontrado'
components:
  schemas:
    UserRequest:
      type: object
      required:
        - name
        - cpf
        - email
        - password
        - confirmPassword
      properties:
        name:
          type: string
          description: 'Nome do usuário. Deve ter entre 3 e 150 caracteres.'
          example: 'João Silva'
          minLength: 3
          maxLength: 150
          nullable: false
          pattern: "^(?!\\s*$).+"  # Garante que o campo não seja apenas espaços em branco
        cpf:
          type: string
          description: 'CPF do usuário. Deve ter 11 dígitos e ser válido. O formato deve ser xxx.xxx.xxx-xx.'
          example: '123.456.789-01'
          pattern: "\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}"  # Valida o formato de CPF com máscara
          nullable: false
        email:
          type: string
          description: 'E-mail do usuário. Deve ser um e-mail válido e ter até 150 caracteres.'
          example: 'joao.silva@example.com'
          maxLength: 150
          nullable: false
          pattern: "^(?!\\s*$).+"
        password:
          type: string
          description: >
            Senha do usuário. Deve ter entre 8 e 50 caracteres, com pelo menos 1 letra maiúscula, 1 letra minúscula, 1 número e 1 caractere especial.
            **Nota:** A senha será armazenada de forma criptografada no banco de dados para garantir a segurança.
          example: 'Senha123@'
          minLength: 8
          maxLength: 50
          nullable: false
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]{8,}$"
        confirmPassword:
          type: string
          description: >
            Confirmação da senha. Deve ser igual à senha fornecida.
            **Nota:** A senha será armazenada de forma criptografada no banco de dados.
          example: 'Senha123@'
          nullable: false
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]{8,}$"
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: 'ID do usuário'
          example: 1
        name:
          type: string
          description: 'Nome do usuário'
          example: 'João Silva'
        cpf:
          type: string
          description: 'CPF do usuário'
          example: '123.456.789-01'
        email:
          type: string
          description: 'E-mail do usuário'
          example: 'joao.silva@example.com'
        status:
          type: string
          description: 'Status do usuário (ACTIVE, INACTIVE, SUSPENDED)'
          example: ACTIVE
        roles:
          type: array
          items:
            type: string
          description: 'Lista de papéis associados ao usuário'
          example: [ ADMIN, USER ]
        created_date:
          type: string
          format: date-time
          description: 'Data de criação do usuário'
          example: 2023-08-17T19:06:00Z
        last_modified_date:
          type: string
          format: date-time
          description: 'Data da última modificação do usuário'
          example: 2023-08-17T19:06:00Z
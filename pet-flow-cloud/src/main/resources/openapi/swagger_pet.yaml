openapi: 3.0.3
info:
  title: Pet API
  description: API para gerenciamento de animais de estimação
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /pets:
    post:
      summary: 'Criar um novo Pet'
      requestBody:
        description: 'Dados para criar um novo pet'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
      responses:
        '201':
          description: Pet criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '400':
          description: 'Erro de validação - Campo inválido ou em branco ou nulo'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                exemploCampoInvalido:
                  summary: "Exemplo de resposta para campo inválido"
                  value:
                    status: 400
                    error: "Bad Request"
                    message: "Campo inválido ou em branco/nulo."
                    errors:
                      - "O campo 'name' não pode ser nulo ou vazio."
        '500':
          description: 'Erro interno do servidor'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                exemploErroInterno:
                  summary: "Exemplo de resposta para erro interno"
                  value:
                    status: 500
                    error: "Internal Server Error"
                    message: "Erro interno do servidor."
                    errors:
                      - "Ocorreu um erro inesperado."
    get:
      summary: 'Buscar pets com filtros e paginação'
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: 'Nome do Animal de Estimação'
        - name: species
          in: query
          schema:
            type: string
          description: 'Espécie do Animal de Estimação'
        - name: breed
          in: query
          schema:
            type: string
          description: 'Raça do Animal de Estimação'
        - name: color
          in: query
          schema:
            type: string
          description: 'Cor do Animal de Estimação'
        - name: dateOfBirth
          in: query
          schema:
            type: string
            format: date
          description: 'Data de nascimento do pet (yyyy-MM-dd)'
        - name: page
          in: query
          schema:
            type: integer
          description: 'Número da página'
        - name: size
          in: query
          schema:
            type: integer
          description: 'Tamanho da página'
        - name: sort
          in: query
          schema:
            type: string
          description: 'Critério de ordenação (ex: name,asc)'
      responses:
        '200':
          description: 'Lista paginada de Pets'
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/PetResponse'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  number:
                    type: integer
                example:
                  exemploPaginado:
                    summary: "Exemplo de lista paginada de Pets"
                    value:
                      content:
                        - id: 1
                          name: "Rex"
                          species: "Cachorro"
                          breed: "Labrador"
                          color: "Marrom"
                          dateOfBirth: "2018-05-20"
                          createdDate: "2024-08-15T10:30:00Z"
                          lastModifiedDate: "2024-08-15T10:30:00Z"
                      totalElements: 1
                      totalPages: 1
                      number: 0
        '400':
          description: 'Campo inválido ou em branco/nulo'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                exemploCampoInvalido:
                  summary: "Exemplo de resposta para campo inválido"
                  value:
                    status: 400
                    error: "Bad Request"
                    message: "Campo inválido ou em branco/nulo."
                    errors:
                      - "O campo 'size' não pode ser nulo ou vazio."
        '500':
          description: 'Erro interno do servidor'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                exemploErroInterno:
                  summary: "Exemplo de resposta para erro interno"
                  value:
                    status: 500
                    error: "Internal Server Error"
                    message: "Erro interno do servidor."
                    errors:
                      - "Ocorreu um erro inesperado."
  /pets/{id}:
    get:
      summary: 'Buscar um pet por ID'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 'ID do Pet'
      responses:
        '200':
          description: 'Pet encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '404':
          description: 'Pet não encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: 'Atualiza um pet existente'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 'ID do Pet'
      requestBody:
        description: 'Dados para atualizaro pet'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetResponse'
      responses:
        '200':
          description: 'Pet atualizado com sucesso!'
        '400':
          description: Campo inválido ou em branco/nulo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Pet não encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Erro interno do servidor'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 'Deleta um pet existente'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 'ID do Pet'
      responses:
        '200':
          description: 'Pet deleteado com sucesso!'
        '404':
          description: 'Pet não encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Erro interno do servidor'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    PetRequest:
      type: object
      required:
        - name
        - species
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 80
          example: 'Rex'
          description: 'Nome do Animal de Estimação'
        species:
          type: string
          maxLength: 80
          example: 'Cachorro'
          description: 'Espécie do Animal de Estimação'
        breed:
          type: string
          maxLength: 80
          example: 'Labrador'
          description: 'Raça do Animal de Estimação'
        color:
          type: string
          maxLength: 20
          example: 'Marron'
          description: 'Cor do Animal de Estimação'
        dateOfBirth:
          type: string
          format: date
          example: '2018-05-20'
          description: 'Data de Nascimento do Animal de Estimação, deve estar no passado'
    PetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: 'ID do Pet'
        name:
          type: string
          example: 'Rex'
          description: 'Nome do Animal de Estimação'
        species:
          type: string
          example: 'Cachorro'
          description: 'Espécie do Animal de Estimação'
        breed:
          type: string
          example: 'Labrador'
          description: 'Raça do Animal de Estimação'
        color:
          type: string
          example: 'Marron'
          description: 'Cor do Animal de Estimação'
        dateOfBirth:
          type: string
          format: date
          example: '2018-05-20'
          description: 'Data de Nascimento do Animal de Estimação (yyyy-MM-dd)'
        createdDate:
          type: string
          format: date-time
          example: '2024-08-15T10:30:00Z'
          description: 'Data de criação do registro'
        lastModifiedDate:
          type: string
          format: date-time
          example: '2024-08-15T10:30:00Z'
          description: 'Data da última modificação do registro'
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        error:
          type: string
          example: 'Bad Request'
        message:
          type: string
          example: 'Campo inválido, em branco ou nulo'
        errors:
          type: array
          items:
            type: string
          example:
            - "O campo 'name' não pode ser nulo ou vazio."